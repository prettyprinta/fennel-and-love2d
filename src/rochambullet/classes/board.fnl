(import-macros {: incf : decf} :mac.math)
(local Object (require "lib.classic"))
(local Board (Object:extend))
(tset Board :new (fn [! tiles tilepx]
  (set !.tiles tiles)
  (set !.tilepx tilepx)
  (set !.px (* !.tiles !.tilepx))
  !))
(tset Board :fit (fn [! pos]
  (local x pos.x)
  (local y pos.y)
  (when (< (+ pos.x (/ !.px 2)) 0)
      (incf pos.x !.px))
  (when (> (+ pos.x (/ !.px 2)) !.px)
      (decf pos.x !.px))
  (when (< (+ pos.y (/ !.px 2)) 0)         
      (incf pos.y !.px))
  (when (> (+ pos.y (/ !.px 2)) !.px)  
      (decf pos.y !.px))
  (or (~= x pos.x) (~= y pos.y))))
(tset Board :draw (fn [! x y]
  (love.graphics.push)
  (love.graphics.translate (- x (/ !.px 2)) (- y (/ !.px 2)))
  (for [j 0 (- !.tiles 1)] (for [i 0 (- !.tiles 1)]
    (if (= (% (+ i j) 2) 0) 
        (love.graphics.setColor (/ 1 math.pi) (/ 1 math.pi) (/ 1 math.pi) 1)
        (love.graphics.setColor (/ 2 math.pi) (/ 2 math.pi) (/ 2 math.pi) 1))
    (love.graphics.rectangle "fill" (* j !.tilepx)  (* i !.tilepx)
                                    !.tilepx        !.tilepx)
    (love.graphics.setColor 0 0 0 (/ 1 math.pi math.pi))
    (local file ["A" "B" "C" "D" "E" "F" "G" "H"])
    (love.graphics.printf (.. (. file (+ j 1)) (+ i 1)) (* j !.tilepx) 
                          (+ (* i !.tilepx) (/ !.tilepx 4)) 
                          (/ !.tilepx 4) :center 0 4 4)))
  (love.graphics.setColor 1 1 1 1)
  ;(love.graphics.rectangle "line" 0 0 !.px !.px)
  (love.graphics.pop)))
(tset Board :draw* (fn [!] ;; LATER inefficient, draw visible dupes only
  (!:draw (* !.px -1)  (* !.px -1))
  (!:draw (* !.px 0)   (* !.px -1))
  (!:draw (* !.px 1)   (* !.px -1))
  (!:draw (* !.px -1)  (* !.px 0))
  (!:draw (* !.px 0)   (* !.px 0))
  (!:draw (* !.px 1)   (* !.px 0))
  (!:draw (* !.px -1)  (* !.px 1))
  (!:draw (* !.px 0)   (* !.px 1))
  (!:draw (* !.px 1)   (* !.px 1))))
Board
